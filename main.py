import os
from flask import Flask
from threading import Thread
import asyncio
import logging
import random
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage

app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# Initialize bot and dispatcher
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è aiogram
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å
user_last_daily_forecast = {}

# –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ gif-—Ñ–∞–π–ª–∞–º –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
gif_data = {
    'data/cards/00.gif': "–Ü–¥–µ—è, –¥—É–º–∫–∞, –¥—É—Ö–æ–≤–Ω—ñ—Å—Ç—å, —Ç–µ, —â–æ –ø—Ä–∞–≥–Ω–µ –ø—ñ–¥–Ω–µ—Å—Ç–∏—Å—è –Ω–∞–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–º (—è–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π –≤–æ—Ä–æ–∂–∞—Ç—å, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –¥—É—Ö–æ–≤–Ω–∏–º). –£ –≥–∞–¥–∞–Ω–Ω—ñ –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç, –ø–æ–≤'—è–∑–∞–Ω–∏–π —ñ–∑ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–∏–º –∂–∏—Ç—Ç—è–º, –∫–∞—Ä—Ç–∞ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –ø–æ–≥–∞–Ω–æ—é, –≤–æ–Ω–∞ –æ–∑–Ω–∞—á–∞—î –Ω–µ–æ–±–∞—á–Ω—ñ—Å—Ç—å, –¥—É—Ä—ñ—Å—Ç—å, –µ–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ñ—Å—Ç—å, –º–∞–Ω—ñ—é —ñ –Ω–∞–≤—ñ—Ç—å –ø—Å–∏—Ö—ñ—á–Ω—É —Ö–≤–æ—Ä–æ–±—É.",
    'data/cards/01.gif': "–í–º—ñ–Ω–Ω—è, –º—É–¥—Ä—ñ—Å—Ç—å, –ø—Ä–∏—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ—Å—Ç—å, –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å, —Ä–æ–∑—É–º —ñ —Ö–∏—Ç—Ä—ñ—Å—Ç—å, —Å–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å —ñ —Ç–∞–∫ –¥–∞–ª—ñ –∑–∞–≤–∂–¥–∏ —Å–ø–∏—Ä–∞—é—Ç—å—Å—è –Ω–∞ –≥—ñ–¥–Ω—ñ—Å—Ç—å. –Ü–Ω–æ–¥—ñ –æ–∫—É–ª—å—Ç–Ω–∞ –º—É–¥—Ä—ñ—Å—Ç—å.",
    'data/cards/02.gif': "–ú—É–¥—Ä—ñ—Å—Ç—å, –∑–Ω–∞–Ω–Ω—è, –∑–º—ñ–Ω–∞, –∑–º—ñ–Ω–∞, –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ç–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è. –ö–æ–ª–∏–≤–∞–Ω–Ω—è",
    'data/cards/03.gif': "–ö—Ä–∞—Å–∞, —â–∞—Å—Ç—è, –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è, —É—Å–ø—ñ—Ö, —Ä–æ–∑–∫—ñ—à. –£ –¥—É–∂–µ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ –∫–∞—Ä—Ç–∞ –æ–∑–Ω–∞—á–∞—î —Ä–æ–∑—Å—ñ—è–Ω–Ω—è, –±–µ–∑–ø—É—Ç–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è.",
    'data/cards/04.gif': "–í—ñ–π–Ω–∞, –∑–∞–≤–æ—é–≤–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥–∫–æ—Ä–µ–Ω–Ω—è, –ø–µ—Ä–µ–º–æ–≥–∞, —Å–≤–∞—Ä–∫–∞, —á–µ—Å—Ç–æ–ª—é–±—Å—Ç–≤–æ, –≤—Ç—ñ–ª–µ–Ω–Ω—è, —Ä–æ–∑–≤–∏—Ç–æ–∫, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è.",
    'data/cards/05.gif': "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞ –º—É–¥—Ä—ñ—Å—Ç—å, –º–∏–ª–æ—Å–µ—Ä–¥—è, –≤–∏—è–≤, –ø–æ—è—Å–Ω–µ–Ω–Ω—è, –≤—á–µ–Ω–Ω—è. –£ –¥–µ—è–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑ –∫–∞—Ä—Ç–∞–º–∏ –ú–∞–≥, –ü—É—Ç—ñ–≤–Ω–∏–∫ —ñ –ó–∞–∫–æ—Ö–∞–Ω—ñ. –û–∫—É–ª—å—Ç–Ω–∞ –º—É–¥—Ä—ñ—Å—Ç—å.",
    'data/cards/06.gif': "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è. –ú–æ—Ç–∏–≤, –¥—ñ—è —Ç–∞ –≤–ª–∞–¥–∞, —â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –∑ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —Ç–∞ –ø–æ—Ä–∏–≤—É.",
    'data/cards/07.gif': "–¢—Ä—ñ—É–º—Ñ, –ø–µ—Ä–µ–º–æ–≥–∞, –ø–æ–¥–æ–ª–∞–Ω–Ω—è –ø–µ—Ä–µ—à–∫–æ–¥, –∑–¥–æ—Ä–æ–≤'—è. –£—Å–ø—ñ—Ö, —â–æ–ø—Ä–∞–≤–¥–∞ —á–∞—Å–æ–º —à–≤–∏–¥–∫–æ–ø–ª–∏–Ω–Ω–∏–π —ñ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.",
    'data/cards/08.gif': "–°–º—ñ–ª–∏–≤—ñ—Å—Ç—å, –º—É–∂–Ω—ñ—Å—Ç—å, –º–æ–≥—É—Ç–Ω—ñ—Å—Ç—å, —Å–∏–ª–∞ –¥—É—Ö—É —Ç–∞ —Å—Ç—ñ–π–∫—ñ—Å—Ç—å. –°–∏–ª–∞ –Ω–µ–ø–µ—Ä–µ–±–æ—Ä–Ω–∞, –ø–æ–¥—ñ–±–Ω–∞ –¥–æ —Å—É–¥—É, —â–æ –∑–∞–≤–µ—Ä—à—É—î —Å–ø—Ä–∞–≤—É. –Ü–Ω–æ–¥—ñ —Å–∏–º–≤–æ–ª—ñ–∑—É—î —Ç—É–ø—É –∑–∞–≤–∑—è—Ç—ñ—Å—Ç—å —Ç–∞ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –≤–ª–∞–¥–∏.",
    'data/cards/09.gif': "–ú—É–¥—Ä—ñ—Å—Ç—å –∑–≥–æ—Ä–∏, —è–∫—É —à—É–∫–∞—é—Ç—å —ñ –æ–±—Ä—è–¥—è—Ç—å. –†–æ–∑—Å—É–¥–ª–∏–≤—ñ—Å—Ç—å —ñ –¥–∞–ª–µ–∫–æ–≥–ª—è–¥–Ω—ñ—Å—Ç—å, –ø–µ—Ä–µ–¥–±–∞—á–ª–∏–≤—ñ—Å—Ç—å —Ç–∞ —Ä–æ–∑–¥—É–º–∏. –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–µ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è.",
    'data/cards/10.gif': "–î–æ–±—Ä–∏–π —É—Å–ø—ñ—Ö —ñ —â–∞—Å—Ç—è, –∞–ª–µ –≤ –ø–µ–≤–Ω–∏—Ö –º–µ–∂–∞—Ö. –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ: —Å–ø'—è–Ω—ñ–Ω–Ω—è —É—Å–ø—ñ—Ö–æ–º —á–∏ –Ω–µ–≤–¥–∞—á–∞, –∞ —Ç–∞–∫–æ–∂ –ø—Ä–æ–≤–∞–ª, —è–∫—â–æ —ñ–Ω—à—ñ –∫–∞—Ä—Ç–∏, —â–æ –ª–µ–∂–∞—Ç—å –ø–æ—Ä—É—á, —Ü–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å.",
    'data/cards/11.gif': "–í—ñ—á–Ω–∞ –ø—Ä–∞–≤–æ—Å—É–¥–¥—è —Ç–∞ —Ä—ñ–≤–Ω–æ–≤–∞–≥–∞, –±–∞–ª–∞–Ω—Å. –°–∏–ª–∞ —ñ –º—ñ—Ü—å, –∞–ª–µ —Å—Ç—Ä–∏–º–∞–Ω—ñ, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—É–¥—É. –¢–∞–∫–æ–∂ —É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è—Ö –∑ —ñ–Ω—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —é—Ä–∏–¥–∏—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, —Å–ª—É—Ö–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∏ –≤ —Å—É–¥—ñ, —Å—É–¥, –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è —Å—É–¥–æ–º —Ç–æ—â–æ. –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ: –∂–æ—Ä—Å—Ç–æ–∫—ñ—Å—Ç—å —Ç–∞ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.",
    'data/cards/12.gif': "–ü–æ–∫–∞—Ä–∞–Ω–Ω—è. –í—Ç—Ä–∞—Ç–∞. –°—Ç—Ä–∞–∂–¥–∞–Ω–Ω—è –≤–∑–∞–≥–∞–ª—ñ. –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –∑–∞–≤–∂–¥–∏ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–∞.",
    'data/cards/13.gif': "–ß–∞—Å–∏. –°—Ç–æ–ª—ñ—Ç—Ç—è. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è. –ó–º—ñ–Ω–∞. –ù–µ–Ω–∞–≤–º–∏—Å–Ω–µ –∑–º—ñ–Ω–∞, –Ω–∞ –ø—Ä–æ—Ç–∏–≤–∞–≥—É –ú—ñ—Å—è—Ü—é. –Ü–Ω–æ–¥—ñ —Å–º–µ—Ä—Ç—å —ñ —Ä—É–π–Ω–∞—Ü—ñ—è, –æ—Å—Ç–∞–Ω–Ω—î, —â–æ–ø—Ä–∞–≤–¥–∞, –¥—É–∂–µ —Ä—ñ–¥–∫–æ.",
    'data/cards/14.gif': "–ü–æ—î–¥–Ω–∞–Ω–Ω—è, –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è —Å–∏–ª. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è. –û–±'—î–¥–Ω–∞–Ω–Ω—è. –ú–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ –¥—ñ—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫–æ—ó –º–æ–∂–µ –±—É—Ç–∏ —è–∫ —Ö–æ—Ä–æ—à–∏–º, —Ç–∞–∫ —ñ –ø–æ–≥–∞–Ω–∏–º.",
    'data/cards/15.gif': "–ú–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω—ñ—Å—Ç—å. –ú–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ —Å–∏–ª–∞. –°–ø–æ–∫—É—Å–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ –∞–±–æ —ñ–Ω–æ–¥—ñ –Ω–∞–≤'—è–∑–ª–∏–≤–∞ —ñ–¥–µ—è, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ –∫–∞—Ä—Ç–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –∑–∞–∫–æ—Ö–∞–Ω–∏–º–∏.",
    'data/cards/16.gif': "–ê–º–±—ñ—Ü—ñ—è, –±–æ—Ä–æ—Ç—å–±–∞, —Å–≤–∞—Ä–∫–∞, –≤—ñ–π–Ω–∞, —Ö–æ—Ä–æ–±—Ä—ñ—Å—Ç—å. –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –∑ –Ü–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ —É –¥–µ—è–∫–∏—Ö –ø–æ—î–¥–Ω–∞–Ω–Ω—è—Ö: —Ä—É–π–Ω–∞—Ü—ñ—è, –∞–≤–∞—Ä—ñ—è, –ø–∞–¥—ñ–Ω–Ω—è, –Ω–µ–±–µ–∑–ø–µ–∫–∞.",
    'data/cards/17.gif': "–ù–∞–¥—ñ—è, –≤—ñ—Ä–∞, –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞. –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ: –º—Ä—ñ–π–ª–∏–≤—ñ—Å—Ç—å, –æ—à—É–∫–∞–Ω–∞ –Ω–∞–¥—ñ—è.",
    'data/cards/18.gif': "–ù–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å, –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ (–Ω–∞ –ø—Ä–æ—Ç–∏–≤–∞–≥—É –∫–∞—Ä—Ç—ñ –°–º–µ—Ä—Ç—å). –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ–º–∏–ª–∫–∞, –±—Ä–µ—Ö–Ω—è, —Ñ–∞–ª—å—à, –æ–±–º–∞–Ω.",
    'data/cards/19.gif': "–°–ª–∞–≤–∞, –≤–∏–≥–æ–¥–∞ —Ç–∞ –ø—Ä–∏–¥–±–∞–Ω–Ω—è, –±–∞–≥–∞—Ç—Å—Ç–≤–æ, —â–∞—Å—Ç—è, —Ä–∞–¥—ñ—Å—Ç—å. –£ –ø–æ–≥–∞–Ω—ñ–π –≥—ñ–¥–Ω–æ—Å—Ç—ñ: –º–∞—Ä–Ω–æ—Å–ª–∞–≤—Å—Ç–≤–æ, –∑–∞—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å, —á–≤–∞–Ω–ª–∏–≤–∞ –ø–æ–∫–∞–∑—É—Ö–∞.",
    'data/cards/20.gif': "–û—Å—Ç–∞—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è, —Å—É–¥–∂–µ–Ω–Ω—è, –≤–∏—Ä–æ–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó —Å–ø—Ä–∞–≤–∏ —á–∏ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –Ω–∞–¥—ñ—ó –Ω–∞ –∞–ø–µ–ª—è—Ü—ñ—é —á–∏ –ø–µ—Ä–µ–≥–ª—è–¥. –£ –ø–æ–≥–∞–Ω–æ–º—É –≥—ñ–¥–Ω–æ—Å—Ç—ñ: –≤—ñ–¥–∫–ª–∞–¥–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∏.",
    'data/cards/21.gif': "–ú–∞—Ç–µ—Ä—ñ—è, —Å—É—Ç–Ω—ñ—Å—Ç—å, —Å–∏–Ω—Ç–µ–∑, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞. –°–≤—ñ—Ç, —Ü–∞—Ä—Å—Ç–≤–æ. –ó–∞–∑–≤–∏—á–∞–π –æ–∑–Ω–∞—á–∞—î —Å—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —ñ —Ç–æ–º—É —Ü—ñ–ª–∫–æ–º –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞–≤–∫–æ–ª–∏—à–Ω—ñ—Ö –∫–∞—Ä—Ç–æ–∫.",
    # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ gif-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—é–¥–∞
}

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ gif –∏ –æ–ø–∏—Å–∞–Ω–∏—è
async def send_daily_forecast(user_id):
    gif_files = list(gif_data.keys())

    if not gif_files:
        await bot.send_message(user_id, "–í–∏–±–∞—á—Ç–µ, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö gif-–∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞—Ä–∞–∑.")
        return

    gif_path = random.choice(gif_files)
    description = gif_data[gif_path]

    gif_file = types.FSInputFile(gif_path)
    await bot.send_document(user_id, gif_file, caption=description)

    user_last_daily_forecast[user_id] = datetime.datetime.now()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè")],
        [types.KeyboardButton(text="‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏")],
        [types.KeyboardButton(text="–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞")],
        [types.KeyboardButton(text="‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")]
    ])

    await bot.send_message(user_id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—éüëá:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def process_start_command(message: types.Message):
    user_ids.add(message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè")],
        [types.KeyboardButton(text="‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏")],
        [types.KeyboardButton(text="–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞")],
        [types.KeyboardButton(text="‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")]
    ])
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—éüëá:", reply_markup=keyboard)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Text(in_={"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè", "‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏", "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞", "‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"}))
async def process_text_message(message: types.Message):
    user_id = message.from_user.id
    action = message.text

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè")],
        [types.KeyboardButton(text="‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏")],
        [types.KeyboardButton(text="–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞")],
        [types.KeyboardButton(text="‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")]
    ])

    if action == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè":
        last_used = user_last_daily_forecast.get(user_id)
        if last_used and (datetime.datetime.now() - last_used).total_seconds() < 86400:
            await message.answer("–í–∏ –≤–∂–µ –æ–¥–µ—Ä–∂–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!\n–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–π–æ–ºüëá", reply_markup=keyboard)
        else:
            await send_daily_forecast(user_id)
    elif action == "‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏":
        await message.answer("–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –¢–∞—Ä–æ –ø–æ –≤—Å—ñ–º –∂–∏—Ç—Ç—î–≤–∏–º —Å–∏—Ç—É–∞—Ü—ñ—è–º:\nüßë‚Äçüíº–†–æ–±–æ—Ç–∞\nüíµ–§—ñ–Ω–∞–Ω—Å–∏\nüíå–ö–æ—Ö–∞–Ω–Ω—è\n‚öïÔ∏è–ó–¥–æ—Ä–æ–≤‚Äô—è", reply_markup=keyboard)
    elif action == "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞":
        await message.answer("–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫: \n4149609029416874 ", reply_markup=keyboard)
    elif action == "‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è":
        user_states[user_id] = "awaiting_question"
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Text, lambda message: user_states.get(message.from_user.id) == "awaiting_question")
async def handle_question(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_question = message.text

    await bot.send_message(ADMIN_ID, f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} (ID: {user_id}):\n{user_question}")

    user_states[user_id] = None

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å üôè")],
        [types.KeyboardButton(text="‚≠ê –ú–æ—ó –ø–æ—Å–ª—É–≥–∏")],
        [types.KeyboardButton(text="–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ üí∞")],
        [types.KeyboardButton(text="‚ùì‚ùì‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")]
    ])

    inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ", callback_data=f"answer:{user_id}")]
    ])

    await message.answer("–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å‚è≤Ô∏è", reply_markup=keyboard)
    await bot.send_message(ADMIN_ID, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üëá", reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(Text.startswith('answer:'))
async def process_callback_answer(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])

    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {user_id}")

    user_states[callback_query.from_user.id] = f"answering:{user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(Text, lambda message: user_states.get(message.from_user.id, "").startswith("answering:"))
async def handle_admin_answer(message: types.Message):
    admin_id = message.from_user.id
    state = user_states.get(admin_id, "")
    if state:
        user_id = int(state.split(':')[1])
        answer_text = message.text

        await bot.send_message(user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ üòÄ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {answer_text}")

        await message.answer("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—Éüôè")

        user_states[admin_id] = None

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(Command("broadcast"))
async def process_broadcast_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        user_states[message.from_user.id] = "awaiting_broadcast"
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(Text, lambda message: user_states.get(message.from_user.id) == "awaiting_broadcast")
async def handle_broadcast_message(message: types.Message):
    admin_id = message.from_user.id
    if admin_id == ADMIN_ID:
        broadcast_message = message.text

        for user_id in user_ids:
            try:
                await bot.send_message(user_id, broadcast_message)
            except Exception as e:
                logging.error(f"Failed to send message to {user_id}: {e}")

        await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        user_states[admin_id] = None

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(Command("broadcast_photo"))
async def process_broadcast_photo_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        user_states[message.from_user.id] = "awaiting_broadcast_photo"
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message(Text, lambda message: user_states.get(message.from_user.id) == "awaiting_broadcast_photo")
async def handle_broadcast_photo_caption(message: types.Message):
    admin_id = message.from_user.id
    if admin_id == ADMIN_ID:
        photo_caption = message.text
        user_states[admin_id] = ("awaiting_photo", photo_caption)
        await message.answer("–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(F.photo, lambda message: user_states.get(message.from_user.id, [None])[0] == "awaiting_photo")
async def handle_broadcast_photo(message: types.Message):
    admin_id = message.from_user.id
    state = user_states.get(admin_id)
    if state:
        _, photo_caption = state
        photo = message.photo[-1].file_id

        for user_id in user_ids:
            try:
                await bot.send_photo(user_id, photo, caption=photo_caption)
            except Exception as e:
                logging.error(f"Failed to send photo to {user_id}: {e}")

        await message.answer("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        user_states[admin_id] = None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    keep_alive()
    asyncio.run(main())
